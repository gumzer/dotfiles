snippet "^#!" "shebang for Python 3" r
#!/usr/bin/env python3
# coding: utf-8

$0
endsnippet

snippet "^main" "main function" r
def main():
    ${1:pass}

##############################################################################

if __name__ == "__main__":
    main()
endsnippet

snippet "c(\d+)" "# N times" r
`!p snip.rv = '#' * int(match.group(1))`
$0
endsnippet

snippet ifname "strange condition before calling main" b!
$0if __name__ == "__main__":
    main()
endsnippet

snippet alap "basic skeleton, Python 2" b
#!/usr/bin/env python
# coding: utf-8


def main():
    $0print 'Py2'

##############################################################################

if __name__ == "__main__":
    main()
endsnippet

snippet alap2 "basic skeleton, Python 2 -> Python 3" b
#!/usr/bin/env python
# coding: utf-8

from __future__ import (absolute_import, division,
                        print_function, unicode_literals)


def main():
    $0print('Py2â†’3')

##############################################################################

if __name__ == "__main__":
    main()
endsnippet

snippet alap3 "basic skeleton for Python 3" b
#!/usr/bin/env python3
# coding: utf-8


def main():
    $0print('Py3')

##############################################################################

if __name__ == "__main__":
    main()
endsnippet

snippet conda3 "basic skeleton for Anaconda 3" b
#!/opt/anaconda3/bin/python3
# coding: utf-8


def main():
    $0print('Anaconda3')

##############################################################################

if __name__ == "__main__":
    main()
endsnippet

snippet future "__future__ imports for Python 2 -> Python 3 transition" b
from __future__ import (absolute_import, division,
                        print_function, unicode_literals)
$0
endsnippet

snippet p "print" b
print($0)
endsnippet

snippet '"""' "multiline comment" r
"""
$0
"""
endsnippet

snippet ret "return" b
return $0
endsnippet

snippet T "True"
True
endsnippet

snippet F "False"
False
endsnippet

snippet i "import" b
import
endsnippet
